@use "sass:math";
@import "_vars";

$default-chart: 'input[type="radio"]:not([value="none"]):not([value="pie"]):checked ~ .chart__inner';
$bar-chart: '.chart input[type=radio]:is([value="bar"],[value="comparison"]):not([value=none]):not([value=pie]):checked~.chart__inner';
$combo-chart: 'input[type=radio][value="combo"]:not([value=none]):not([value=pie]):checked~.chart__inner';
$comparison-chart: 'input[type=radio][value="comparison"]:not([value=none]):not([value=pie]):checked~.chart__inner';
$comparison-chart-key: 'input[type=radio][value="comparison"]:not([value=none]):not([value=pie]):checked~.chart__key';
$responsive-chart: '.chart input[type=radio][value="responsive"]:not([value=none]):not([value=pie]):checked~.chart__inner';
$scatter-line-chart: 'input[type="radio"]:not([value="none"]):not([value="pie"]):is([value="line"],[value="scatter"],[value="bubble"],[value="radar"],[value="combo"]):checked ~ .chart__inner';
$line-chart: 'input[type="radio"]:not([value="none"]):not([value="pie"])[value="line"]:checked ~ .chart__inner';
$bubble-chart: 'input[type="radio"]:not([value="none"]):not([value="pie"])[value="bubble"]:checked ~ .chart__inner';
$radar-chart: 'input[type="radio"]:not([value="none"]):not([value="pie"])[value="radar"]:checked ~ .chart__inner';
$pie-chart: 'input[type="radio"]:not([value="none"]):is([value="pie"],[value="polar"]):checked ~ .chart__inner';
$polar-chart: 'input[type="radio"]:not([value="none"])[value="polar"]:checked ~ .chart__inner';

// #region Functions and mixins
@function rem($pixels, $context: 16)
{
	@return #{math.div($pixels,$context)}rem;
}
// #endregion

// #region Table wrapper - adds overflow support when in smaller containers
.table__wrapper {
  display: block;
  width: calc(100% + 1rem);
  padding-right: 1rem;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: -ms-autohiding-scrollcolumn;
  margin-bottom: 2rem;
}
// #endregion

// #region Basic setup - including: container setup, css vars 
*:has(> .chart){
  container-type: inline-size;
}

.chart {
  
  // CSS vars that can be overwritten by declaring them without the -set on the end of the variable i.e. --chart-colour-1: red; would overwrite --chart-colour-1-set
  --body-colour-set: var(--body-colour, white);
  --text-colour-set: var(--text-colour, black);
  --chart-height-set: var(--chart-height, #{$chart-height});
  --chart-height-lg-set: var(--chart-height-lg, #{$chart-height-lg});
  --chart-height-resp: var(--chart-height-set);

  @each $index, $value in $chart-colors {
    --chart-colour-#{$index}-set: var(--chart-colour-#{$index},#{$value});
  }

  // Non-configurable css vars
  --index-below: -1;
  --index-base: 0;
  --index-focus: 2;
  --index-above: 10;
  --index-floating: 100;
  --index-menu: 200;
  --index-overlay: 1000;
  --key-label-width: 100%;
  --label-size: #{rem(12)};
  --pie-size: calc(50% - 1.4rem);
  --line-thickness: 1px;
  --yaxis-width: 0;
  --yaxis-point-display: none;
  --yaxis-last-point-transform: translate(0,-100%);

  @container (min-width: 36em) {

    --chart-height-resp: var(--chart-height-lg-set);
    --pie-size: calc(33.333% - 1.4rem);
    --line-thickness: 0.8px;
    --yaxis-width: auto;
    --yaxis-point-display: block;
    --yaxis-last-point-transform: translate(0,-50%);
  }
  
  @container (min-width: 62em) {

    --label-size: #{rem(14)};
    --pie-size: calc(25% - 1.5rem);
    --line-thickness: 0.5px;
  }

  &:has(.chart__options){
    position: relative;
    padding-top: rem(24);
  }
  
  margin-bottom: 2rem;
  display: flex;
  flex-direction: column;

  > * {
    display: block;
    order: 2;
  }

  > figcaption {
    display: contents;

    p:not(.chart__strapline,.chart__title) {
      margin-bottom: 0.25rem;
      font-size: var(--label-size);
    }

    > * {
      order: 3;
    }

    > :is(.chart__title, .chart__strapline) {
      order: 1;
    }
  }
}
// #endregion

// #region figure caption elements
.chart__title {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.25rem;
}

.chart__strapline {
  margin-bottom: 1rem;
}

.chart__source {
  border-top: 1px solid black;
  position: relative;
  padding-top: rem(4);
  padding-right: rem(70);

  &:after {
    position: absolute;
    top: rem(4);
    right: 0;
    content: "";
    display: block;
    height: rem(16);
    aspect-ratio: 112/32;
    background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='112' height='32' viewBox='0 0 112 32'%3e%3cpath d='M111.99999,4.44444577e-05 L111.99999,32.0000444 L79.9999905,32.0000444 L79.9999905,4.44444577e-05 L111.99999,4.44444577e-05 Z M72.0000119,-3.55271368e-15 L72.0000119,32 L40.0000119,32 L40.0000119,-3.55271368e-15 L72.0000119,-3.55271368e-15 Z M32,-3.55271368e-15 L32,32 L-1.13686838e-13,32 L-1.13686838e-13,-3.55271368e-15 L32,-3.55271368e-15 Z M97.469329,6.80826869 C96.0294397,6.80826869 94.7294393,7.02226876 93.5693278,7.44982444 C92.4089942,7.87782457 91.4137717,8.49471364 90.5841047,9.30049166 C89.7538823,10.1067141 89.1188821,11.07327 88.6785486,12.199937 C88.2378818,13.3269373 88.0177706,14.5896043 88.0177706,15.9876048 C88.0177706,17.4188274 88.2296596,18.7062722 88.6531042,19.8493837 C89.0763265,20.9929396 89.6861045,21.9591621 90.482438,22.748829 C91.2784383,23.5383848 92.2522163,24.1430516 93.4042167,24.5624962 C94.5558837,24.9819408 95.8516619,25.1917186 97.2914401,25.1917186 C98.3752182,25.1917186 99.4086629,25.072163 100.391219,24.8338296 C101.37333,24.5956073 102.237108,24.2706072 102.982664,23.8592738 L102.982664,23.8592738 L102.982664,20.4292727 C101.40733,21.4001619 99.6881074,21.8851621 97.8251069,21.8851621 C96.6054399,21.8851621 95.567884,21.6549398 94.7126615,21.194273 C93.8572168,20.7338284 93.2049944,20.0633837 92.7564387,19.1831613 C92.3073275,18.3032721 92.0831052,17.2380496 92.0831052,15.9876048 C92.0831052,14.7377155 92.3156608,13.6766041 92.7816609,12.8044927 C93.2474389,11.9327147 93.916328,11.2664922 94.7888838,10.8058254 C95.6609951,10.3453809 96.715551,10.1148252 97.9521069,10.1148252 C98.8496628,10.1148252 99.7052186,10.2342697 100.518108,10.4726031 C101.331219,10.7112699 102.084664,11.0609366 102.779442,11.5212701 L102.779442,11.5212701 L102.779442,8.01738016 C102.017219,7.62260227 101.191441,7.32260218 100.302219,7.11671323 C99.4129963,6.91126872 98.4685515,6.80826869 97.469329,6.80826869 Z M55.7552388,7.00000208 L49.0000146,7.00000208 L49.0000146,25.0000021 L56.1713501,25.0000021 C57.590906,25.0000021 58.8063508,24.7903407 59.8181289,24.3706739 C60.8297959,23.9513405 61.6087961,23.3553403 62.1555741,22.5832289 C62.7020187,21.8114509 62.9754632,20.8882284 62.9754632,19.8140059 C62.9754632,18.7232278 62.6941298,17.7960053 62.1312407,17.0321162 C61.5681294,16.2686715 60.7563514,15.7104491 59.6957955,15.3580046 C60.4625736,14.9891156 61.0420182,14.4894488 61.4335738,13.8601152 C61.8252406,13.2307817 62.0210185,12.4881148 62.0210185,11.6321146 C62.0210185,10.1385586 61.4742405,8.99311379 60.3812402,8.19578022 C59.2877954,7.39889109 57.745795,7.00000208 55.7552388,7.00000208 L55.7552388,7.00000208 Z M15.7552269,7.00000208 L9.00000268,7.00000208 L9.00000268,25.0000021 L16.1713381,25.0000021 C17.5908941,25.0000021 18.8062278,24.7903407 19.8182281,24.3706739 C20.8296729,23.9513405 21.6087842,23.3553403 22.1555621,22.5832289 C22.7021179,21.8114509 22.9755624,20.8882284 22.9755624,19.8140059 C22.9755624,18.7232278 22.6941179,17.7960053 22.1311177,17.0321162 C21.5682286,16.2686715 20.7563395,15.7104491 19.6957836,15.3580046 C20.4625616,14.9891156 21.0418952,14.4894488 21.4335619,13.8601152 C21.8252287,13.2307817 22.0210066,12.4881148 22.0210066,11.6321146 C22.0210066,10.1385586 21.4741175,8.99311379 20.3811172,8.19578022 C19.2877835,7.39889109 17.7457831,7.00000208 15.7552269,7.00000208 L15.7552269,7.00000208 Z M55.8775833,17.2209385 C58.1128062,17.2209385 59.2308065,18.0434943 59.2308065,19.6881614 C59.2308065,20.4602728 58.9369175,21.0518285 58.3496951,21.4629397 C57.7622505,21.8743843 56.9216947,22.0797177 55.8286944,22.0797177 L55.8286944,22.0797177 L52.6469157,22.0797177 L52.6469157,17.2209385 Z M15.8775714,17.2209385 C18.1129054,17.2209385 19.2307946,18.0434943 19.2307946,19.6881614 C19.2307946,20.4602728 18.9370167,21.0518285 18.3496832,21.4629397 C17.7622386,21.8743843 16.9216828,22.0797177 15.8286825,22.0797177 L15.8286825,22.0797177 L12.6469038,22.0797177 L12.6469038,17.2209385 Z M55.412572,9.92028073 C57.3541282,9.92028073 58.3252396,10.6338365 58.3252396,12.0600591 C58.3252396,12.7988371 58.0763506,13.373504 57.5786838,13.7846152 C57.0807948,14.1960598 56.3587946,14.4013932 55.412572,14.4013932 L55.412572,14.4013932 L52.6469046,14.4013932 L52.6469046,9.92028073 Z M15.4125601,9.92028073 C17.3541163,9.92028073 18.3252277,10.6338365 18.3252277,12.0600591 C18.3252277,12.7988371 18.0762276,13.373504 17.5786719,13.7846152 C17.0807829,14.1960598 16.3587826,14.4013932 15.4125601,14.4013932 L15.4125601,14.4013932 L12.6468927,14.4013932 L12.6468927,9.92028073 Z'%3e%3c/path%3e%3c/svg%3e");
    background-size: 100% 100%;
  }
}
// #endregion

// #region Apply chart colours
@for $i from 1 to 10 {
  
  .chart__key .key:nth-child(10n - #{10 - $i}),
  input[type="radio"]:not([value="none"]):not([value="pie"]):checked ~ .chart__inner table tbody tr td:not(:first-child):nth-child(10n - #{10 - ($i+1)}) {
    
    --chart-colour: var(#{'--chart-colour-'+$i+'-set'});
  }

  input:is([value="line"],[value="radar"],[value="combo"]):checked ~ .chart__inner .line:nth-child(10n - #{10 - $i}) {
    color: var(#{'--chart-colour-'+$i+'-set'});
    stroke: currentColor;
    z-index: #{10 - $i};
  }
  input:is([value="pie"],[value="polar"]):checked ~ .chart__inner .pie path:nth-child(10n - #{10 - $i}) {
    fill: var(#{'--chart-colour-'+$i+'-set'});
  }
}

.chart__key .key:nth-child(10n),
input[type="radio"]:not([value="none"]):not([value="pie"]):checked ~ .chart__inner table tbody tr td:not(:first-child):nth-child(10n + 1) {
  
  --chart-colour: var(#{'--chart-colour-10-set'});
}
// #endregion

// #region Chart type switcher
.chart > [type="radio"]{
  opacity: 0;
  position: absolute;
  pointer-events: none;
}

.chart__options {

  position: absolute;
  display: block;
  width: fit-content;
  z-index: var(--index-above);
  top: 0;
  right: 0;
  background-color: var(--body-colour-set);
  

  > span:first-child {
    text-align: right;
    display: block;
    height: rem(24);

    &:before {
      content: "";
      height: rem(16);
      width: rem(16);
      background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3e%3cpath d='M31 19.3v-6.5l-3.9-.5c-.1-.4-.3-.9-.5-1.5l2.4-3-4.7-4.7-3.1 2.4c-.4-.2-.9-.4-1.5-.6L19.2 1h-6.5l-.5 3.9c-.6.2-1.1.4-1.5.6l-3-2.4L3 7.7l2.4 3c-.2.5-.4 1.1-.5 1.5l-3.9.5v6.5l3.9.5c.2.5.3 1 .6 1.5l-2.4 3 4.7 4.7 3-2.3c.4.2 1 .5 1.5.6l.5 3.8h6.5l.5-3.8c.5-.2 1.1-.4 1.5-.6l3 2.3 4.7-4.7-2.4-3 .6-1.5 3.8-.4zm-2.1-1.9-3.4.5c-.3 1.5-.8 2.7-1.6 3.6l2.1 2.6-1.9 2-2.6-2c-1 .7-2.5 1.3-3.7 1.5l-.5 3.3h-2.6l-.5-3.3c-1.2-.2-2.7-.8-3.7-1.5l-2.6 2-1.9-2 2.1-2.6c-.8-.9-1.2-2.1-1.6-3.6l-3.4-.5v-2.7l3.5-.5c.2-1.1.6-2.3 1.4-3.7L6 7.9l1.9-2L10.6 8c.8-.7 1.7-1.1 3.6-1.6l.5-3.4h2.6l.5 3.4c1.9.5 2.8.9 3.6 1.6l2.7-2L26 8l-2 2.5c.8 1.4 1.2 2.6 1.4 3.7l3.5.5v2.7zM16 20.8c-2.7 0-4.7-2-4.7-4.8 0-2.7 2-4.7 4.7-4.7s4.7 2 4.7 4.7-2 4.8-4.7 4.8zm0 2.2c3.9 0 6.9-3 6.9-7 0-3.9-3-6.9-6.9-6.9s-6.9 3-6.9 6.9c0 4 3 7 6.9 7z'%3e%3c/path%3e%3c/svg%3e");
      background-size: 100% 100%;
      display: inline-block;

      vertical-align: bottom;
      margin-bottom: rem(3);
      margin-right: rem(6);
    }
  }

  > *:not(:first-child) {

    display: none;
  }

  label {
    cursor: pointer;
    
    &:hover {

      background: var(--label-bg, rgb(220, 220, 220));
    }
  }

  &:hover {
    outline: 3px solid black;

    box-shadow: 0 0 0 calc(0.125rem + 0.125rem) #FFFFFF;
    outline-offset: calc(0.125rem + 0.125rem);

    > * {
      display: block;
    }
  }

  .chart__options__title {
    margin-top: 1rem;
    font-weight: bold;
  }
}

.chart > [type="radio"]:focus ~ .chart__switcher{
  label {
    display: block;
  }
}
// #endregion

// #region Chart key
.chart > input[type="checkbox"] {
  opacity: 0;
  position: absolute;
  pointer-events: none;
}

.chart__key {

  padding: 0.75rem 0 0 0.75rem;
  margin-bottom: 1.5rem;
  background: var(--colour-key-bg, rgb(220, 220, 220));
  display: flex;
  overflow: auto;
  scroll-snap-type: x mandatory;
    scroll-padding: 0.75rem;

  .key {
    display: inline-block;
    padding: 0.5rem;
    margin-right: 0.75rem;
    margin-bottom: 0.75rem;
    background: white;
    border-left: 5px solid var(--chart-colour);
    white-space: nowrap;
    cursor: pointer;
    scroll-snap-align: start;

    &:hover,
    &:focus-within {
      outline: 3px solid var(--chart-colour);
    }
  }
}
// #endregion

// #region Hide data sets
.chart > input[type="checkbox"]:not(:checked) ~ .chart__key .key {
  
  opacity: 0.25;
}

.chart > input[type="checkbox"]:not(:checked) ~ input[type="radio"]:not([value="none"]):checked ~ .chart__inner table tbody tr td:not(:first-child) {
  display: none;
}

.chart > input[type="checkbox"]:not(:checked) ~ .chart__inner :is(.lines, .radar) .line {
  display: none!important;
}

@for $i from 1 to 10 {
  

  .chart > input[type="checkbox"]:nth-of-type(#{$i}):not(:checked) ~ input[type="radio"]:not([value="none"]):checked ~ .chart__inner table tbody tr td:not(:first-child):nth-child(#{$i+1}) {
    display: block;
  }

  .chart > input[type="checkbox"]:nth-of-type(#{$i}):focus ~ .chart__key .key:nth-of-type(#{$i}) {
    outline: 3px solid var(--chart-colour);
  }

  .chart > input[type="checkbox"]:nth-of-type(#{$i}):not(:checked) ~ .chart__key .key:nth-of-type(#{$i}) {
    
    opacity: 1;
  }
  
  input:nth-of-type(#{$i}):not(:checked) ~ .chart__inner :is(.lines,.radar) .line:nth-child(#{$i}) {
    display: block!important;
  }
}
// #endregion

// #region Default column chart (Also applies to line chart)
#{'.chart ' + $default-chart} {

  display: block;
  display: flex;
  position: relative;
  margin-bottom: 1rem;

  .chart__yaxis {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column-reverse;
    width: 0;
    width: var(--yaxis-width);

    .axis__point {
      
      bottom: var(--percent);
      position: relative;
      height: 0;
      white-space: nowrap;

      &:not(:last-child){
        display: var(--yaxis-point-display);
      }

      span {
        display: block;
        transform: translate(0,-50%);
        padding-right: 0.25rem;
        text-align: right;
        font-size: var(--label-size);
      }

      &:last-child span {

        transform: var(--yaxis-last-point-transform);
      }
    }
  }

  .chart__guidelines {

    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: calc(100% - 1rem);
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column-reverse;
    pointer-events: none;

    .guideline {

      bottom: var(--percent);
      position: absolute;
      right: 0;
      width: 100%;
      height: 0px;
      margin-bottom: -1px;
      border-bottom: 1px dashed #eeeeee;
      pointer-events: none;
      z-index: var(--index-below);
      overflow: hidden;

      &:not(.guideline--target) span{
        display: none;
      } 
    }

    .guideline--target {

      border-bottom: 1px dashed #000000;
      z-index: var(--index-above);
      text-shadow: 1px solid white;
      overflow: visible;

      span {
        position: absolute;
        bottom: 0;
        font-size: var(--label-size);
        text-shadow: 1px 1px 2px rgba(255, 255, 255, 1);
        background: rgba(255,255,255,0.6);
      }
    }
    [data-value="0"] {
      border-bottom: 1px solid var(--colour-primary);

      &:not(:first-child){

        border-bottom: 1px dashed var(--colour-primary);
      }
    }
  }

  .table__wrapper {

    padding-bottom: 1rem;
    padding-right: 0;
    margin: 0;
    overflow: visible;
    position: relative;

    table{
      overflow: visible;
    }
  }

  table {
    display: block;
    width: 100%;
    padding-top: var(--chart-height-resp); // 16:9 ratio
    position: relative;
    margin-bottom: 0;
    //border-bottom: 1px solid black;

    thead {
      display: none;
    }

    tbody {

      display: flex;
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      flex-direction: row;
      border: none;
    }
    
    tbody tr {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: flex-end;
      border: none;
      width: 100%;
      height: 100%;
      position: relative;
      padding: 0 2px;

      td {
        font-weight: inherit;
      }

      td:first-child {
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translate(-50%,0);
        width: fit-content;
        padding: 0;
        white-space: nowrap;
        max-width: 6rem;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: var(--label-size);
        display: none;
        text-align: center;

        @container (min-width: 62em) {
    
          display: block;
          left: 50%!important;
          transform: translate(-50%,0)!important;
        }
      }

      &:first-child td:first-child,
      &:last-child td:first-child {

        display: block;
      }

      
      &:first-child td:first-child {

        left: 0%;
        transform: translate(0,0);
        display: block;
        text-align: left;
      }
      &:last-child td:first-child {

        left: 100%;
        transform: translate(-100%,0);
        display: block;
        text-align: right;
      }

      td:not(:first-child) {
        height: 100%;
        height: var(--percent, 0%);
        bottom: var(--bottom,0%);
        width: 100%;
        max-width: 5rem;
        position: relative;
        background: green;
        padding: 0;
        background: var(--chart-colour);

        &:has(span:empty),
        &:empty{
          display: none!important;
        }

        &[data-label]:before {
          display: none;
        }

        span {
          position: absolute;
          bottom: 100%;
          left: 50%;
          font-size: var(--label-size);
          line-height: 1.2;
          transform: translate(-50%,0);
          background: var(--chart-colour);
          opacity: 0;
          pointer-events: none;
          padding: 0.5rem;
          border-radius: 0.5rem;
          margin-bottom: 0.25rem;
          color: white;
          white-space: pre;
          text-align: center;

          &::before {
            content: attr(data-label)  ' - ' attr(data-group) '\A';
          }

          &[data-second]:after {
            content: '\A' attr(data-second-label) ': ' attr(data-second);
          }
        }

        &:hover span {
          opacity: 1;
          z-index: var(--index-above);
        }
      }

      &:first-child td:not(:first-child) span {

        left: -20%;
        transform: translate(0%,0);
        text-align: left;
      }

      &:last-child td:not(:first-child) span {
          
        left: 120%;
        transform: translate(-100%,0);
        text-align: right;
      }

      @container (min-width: 36em) {

        &:first-child td:not(:first-child) span,
        &:last-child td:not(:first-child) span {
          
          left: 50%;
          transform: translate(-50%,0);
          text-align: center;
        }
      }

      td:first-child {
        &[data-label]:before {
          display: none;
        }
      }
    }

    // Hide labels when it gets crowded
    @container (min-width: 62em) {

      tbody:has(tr:nth-child(25)){
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(5n)) td:first-child {
          display: block!important;
        }
      }

      tbody:has(tr:nth-child(50)){

        tr:is(:first-child, :nth-child(5n)) td:first-child,
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(10n)) td:first-child {
          display: block!important;
        }
      }

      tbody:has(tr:nth-child(100)){

        tr:is(:first-child, :nth-child(10n)) td:first-child,
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(20n)) td:first-child {
          display: block!important;
        }
      }
    }

    // Hide items when theres too many too display
    tbody:has(tr:nth-child(1001)){

      tr {
        display: none;
      }

      tr:nth-last-child(-n+1001) ~ tr {
        display: flex;
      }
    }
  }

  .line,
  .pie {
    display: none;
  }
}
// #endregion

// #region Stacked column chart
input[type="radio"]:not([value="none"]):not([value="pie"])[value="stacked"]:checked ~ .chart__inner {
  table tbody tr {
    flex-direction: column-reverse;
    justify-content: flex-start;
    align-items: center;
  }
}
// #endregion

// #region bar chart and responsive chart
@mixin barchart($selector) {
  #{$selector} {

    .chart__guidelines {
      position: absolute;

      .guideline {
        bottom: auto;
        left: var(--percent);
        height: 100%;
        border-left: 1px dashed #eee;
        width: 0;

        span{
          display: block;
          font-size: var(--label-size);
          position: absolute;
          top: 100%;
          transform: translate(-50%,0.2em);
        } 
      }
    }

    .chart__yaxis {

      display: none;
    }

    table {

      padding-top: 0;
    }

    table tbody {

      flex-direction: column;
      position: relative;
    }

    table tbody tr {
      flex-direction: column;
      align-items: flex-start;
      margin-bottom: 0.5rem;
      padding: 0;

      td {
        
        height: 3rem;
        bottom: 0;
        left: var(--bottom, 0%);
        width: var(--comparison,var(--percent));
        max-width: 100%;
      }

      td:first-child {
        position: static;
        transform: none;
        display: block!important;
        max-height: 1.5rem;
      }
    }

    table tbody:has(tr:nth-child(10)) tr td {
      height: 1.5rem;
    }

    table tbody:has(tr:nth-child(10)) tr:has(td:nth-child(3)) td:not(:first-child) {
      height: 1rem;
    }

    &[data-longest-label] {
      &:before {
        display: block;
        content: attr(data-longest-label);
        font-size: var(--label-size);
        padding-right: 0.5em;
        opacity: 0;
        pointer-events: none;
        white-space: nowrap;
      }   
    }

    &[data-longest-label] table tbody tr {
      td:first-child {
        position: absolute;
        transform: translate(-100%, -50%)!important;
        display: block !important;
        max-height: 1.5rem;
        z-index: var(--index-above);
        top: 50%;
        left: 0!important;
        padding-right: 0.5em;
      }
    }
  }
}


@include barchart($bar-chart);

@container (max-width: 36em) {
  @include barchart($responsive-chart);
}

// #endregion

// #region Line and scatter chart
#{'.chart '+$scatter-line-chart} {

  table tbody {
    justify-content: space-between;

    
    tr:not(:has(.chart__bar)) {
      width: 2px;
      margin-left: -1px;
      margin-right: -1px;
      padding: 0;
    }

    tr {

      td:not(.chart__bar):first-child {
        left: 50%!important;
        width: 4rem;
      }

      td:not(.chart__bar):not(:first-child) {
        position: absolute;
        left: 50%;
        bottom: calc(var(--axis));
        height: 6px;
        width: 6px;
        margin-bottom: -3px;
        margin-left: -3px;
        border-radius: 3px;

        &:hover {
          opacity: 1;
        }
      }

      &:before {
        content: "";
        border-left: 1px dashed #eeeeee;
        height: 100%;
        width: 0;
        position: absolute;
        top: 0;
        left: 50%;
        height: 100%;
        margin-left: -1px;
        z-index: var(--index-below);
        opacity: 0;
      }

      &:hover {
        &:before {
          opacity: 1;
        }
      }

      &:is([data-event],[data-event-right]) {
        &:before {
          opacity: 1;
          border-left: 1px dashed #000000;
        }
        &:after {
          content: attr(data-event);
          position: absolute;
          top: 0;
          left: 50%;
          width: max-content;
          z-index: var(--index-below);
          font-size: var(--label-size);
          background: rgba(255,255,255,0.5);
        }
      }
      &[data-event] {
        &:after {
          transform: translate(-50%,-0.5em);
        }
      }
      &[data-event-right] {
        &:after {
          transform: translate(-101%,-0.5em);
        }
      }
      &[data-event-left] {
        &:after {
          transform: translate(1%,-0.5em);
        }
      }
    }
  }

  .pie {
    display: none;
  }
}

// Row css seperated out to include combination


// Lines
#{'.chart '+$line-chart},
#{'.chart '+$combo-chart} {

  .lines ~ table tbody {

    tr {
      
      td:not(.chart__bar):not(:first-child):not(:hover) {

        opacity: 0;
      }
    }
  }

  .line {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    stroke-width: var(--line-thickness);
    width: 100%;
    height: calc(100% - 1rem);
    pointer-events: none;
    z-index: var(--index-above)
  }
}
// #endregion

// #region Pie chart
#{'.chart '+$pie-chart} {

  margin-bottom: 2rem;

  .chart__yaxis,
  .line {
    display: none;
  }
  .table__wrapper {
    display: none;
  }

  .pies {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 2rem;
  }

  .pie {
    position: relative;
    width: 100%;
    aspect-ratio: 1 / 1;
    min-width: rem(200);
    flex: 1 1 auto;
    display: inline-block;
    max-width: var(--pie-size);

    &:first-child {
      margin-left: 0;
    }
    &:last-child {
      margin-right: 0;
    }
  }

  .pie svg {
    width: 100%;
    height: 100%;

    path:hover {
      transform: scale(1.05);
    }
  }

  .pie > div {

    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    background: var(--body-colour-set);
    border-radius: 50%;
    z-index: var(--index-focus);
    padding: 1rem;
    aspect-ratio: 1/1;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 67%;

    span {
      text-align: center;
      display: block;
    }
  }

  .pie:has(path:hover) > div {
    display: none;
  }

  .pie foreignObject {
    background: var(--body-colour-set);
    border-radius: 50%;
    z-index: var(--index-focus);
    pointer-events: none;
    display: none;
    padding: 1rem;

    div {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100%;
    }
    span {
      text-align: center;
      display: block;
    }
  }
  
  .pie {
    path:nth-child(1):hover ~ foreignObject:nth-of-type(1),
    path:nth-child(2):hover ~ foreignObject:nth-of-type(2),
    path:nth-child(3):hover ~ foreignObject:nth-of-type(3),
    path:nth-child(4):hover ~ foreignObject:nth-of-type(4),
    path:nth-child(5):hover ~ foreignObject:nth-of-type(5),
    path:nth-child(6):hover ~ foreignObject:nth-of-type(6),
    path:nth-child(7):hover ~ foreignObject:nth-of-type(7),
    path:nth-child(8):hover ~ foreignObject:nth-of-type(8),
    path:nth-child(9):hover ~ foreignObject:nth-of-type(9){
      display: block;
    }
  }
}
// #endregion

// #region Comparison chart
#{'.chart '+$comparison-chart-key} {
  label {
    pointer-events: none;
  }
  [data-label="Total"] {
    display: none;
  }
}

#{'.chart '+$comparison-chart} {

  &::before {
    display: none;
  }

  table tbody tr {
    flex-direction: row;
    flex-wrap: wrap;
  }

  table tbody tr td:first-child {
    width: 100%!important;
    position: static!important;
    transform: none!important;
    text-align: left;
    font-weight: bold;
  }
  table tbody tr td:not(:first-child) {
    width: var(--comparison);

    span {
      left: 0;
      transform: none !important;
    }
    &:nth-child(3) span{
      left: auto;
      right: 0;
    }
  }
  table tbody tr td[data-label="Total"] {
    display: none;
  }

  &[data-longest-label] {
    &:before {
      display: none!important;
    }   
  }

  &[data-longest-label] table tbody tr {
    td:first-child {
      transform: none!important;
    }
  }

}
// #endregion

// #region Reverted back into a table
input[type="radio"][value="none"]:checked ~ .chart__key {
  display: none;
}
input[type="radio"][value="none"]:checked ~ .chart__inner {

  .chart__guidelines,
  .chart__yaxis,
  .line,
  .pie {
    display: none;
  }
}
// #endregion

// #region Series control buttons
.chart .series__controls {
  display: flex;
}

.chart .series__play-btn,
.chart .series__pause-btn {

  background: none;
  border: none;
  padding: 0;
  margin-inline-end: 1rem;
  margin-block-end: 1rem;

  &:before {
    content: "";
    height: rem(16);
    width: rem(16);
    background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3e%3cpath d='M29 16 5.8 1v30L29 16z'%3e%3c/path%3e%3c/svg%3e");
    background-size: 100% 100%;
    display: inline-block;

    vertical-align: bottom;
    margin-bottom: rem(3);
    margin-right: rem(6);
  }
}

.chart .series__pause-btn {
  &:before {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3e%3cpath d='M7 3h6v26H7zm12 0h6v26h-6z'%3e%3c/path%3e%3c/svg%3e");
  }
}

.chart .series__progress {
  flex-grow: 1;
  height: 1.5rem;
  margin-inline-end: 1rem;
  margin-block-end: 1rem;
  accent-color: black;
}

.chart .series__current {
  line-height: 1.5rem;
  margin-inline-end: 0;
  margin-block-end: 1rem;
}

// #endregion

// #region Bubble chart
#{'.chart '+$bubble-chart} {

  table tbody tr td:not(:first-child) {
    background-color: transparent!important;

    &:before {

      content:""!important;
      display: block;
      height: 30px;
      width: 30px;
      border-radius: 15px;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%) scale(calc(var(--second-percent, 0%)));
      background: var(--chart-colour);
    }
  }
}
// #endregion

// #region Polar chart
#{'.chart '+$polar-chart} {

  .pie>div {
    display: block!important;
    top: 100%;
    height: auto;
    border-radius: 0;
    background: none;
    aspect-ratio: unset;
  }

  .pie path,
  .pie path:hover {
    transform: scale(calc(var(--second-percent)))!important;
  }

  .pie foreignObject {
    background: none;

    .total {
      display: none!important;
    }
  }

  .pie:has(path:hover) path:not(:hover) {
    opacity: 0.5;
  }
}
// #endregion

// #region Radar chart
#{'.chart '+$radar-chart} {

  .chart__yaxis {
    margin: 0;
    position: absolute;
    height: calc(50% - 0.5rem);
    left: 50%;
    top: 0;
    width: 0;

    .axis__point span {
      width: fit-content;
      transform: translate(-50%, 10%);
    }
  }

  .chart__guidelines {
    display: none;
  }

  table tbody tr td:first-child {
    top: auto;
    bottom: 100%;
    width: fit-content;
    display: block;
    transform: translate(-50%, 0);
    z-index: var(--index-below);
  }

  @for $i from 1 to 16 {

    tbody:has(tr:nth-child(#{$i}):last-child) {
      --items: #{$i};
      --part: calc( 360deg / var(--items) );
    }
  }
  
  @for $i from 1 to 16 {

    tbody tr:nth-child(#{$i}) {
      --index: #{$i};
    }
  }

  table {
    padding-top: 60%;
  }


  tbody tr {
    --skew: calc( 90deg - var(--part) );
    border-bottom: 1px solid #8a2be2;
    height: 50%;
    left: 50%;
    margin: 0;
    position: absolute;
    top: 0;
    transform: rotate(calc((var(--part)*var(--index, 1)) - var(--part)));
    transform-origin: 100% 100%;
    width: 0%!important;
    margin: 0!important;

    &:before {
      opacity: 1!important;
      border-left: 1px dashed #000000!important;
    }

    td:not(:first-child) {
      transform: rotate(calc(var(--part) * ((var(--index, 1) - 1) * -1)));
      z-index: var(--index-above);
    }
  }

  :is(.radar, .radar__guidelines) .line {
    display: block;
    position: absolute;
    top: 0;
    left: 50%;
    transform: translate(-50%,0);
    stroke-width: var(--line-thickness);
    width: auto;
    aspect-ratio: 1/1;
    height: calc(100% - 1rem);
    pointer-events: none;
    z-index: var(--index-below);

    path {
      fill: currentColor;
      fill-opacity: 0.5;
    }
  }
  
  .radar__guidelines .line {

    --line-thickness: 0.1px;
    color: #000000;
    z-index: var(--index-below);

    path {
      fill-opacity: 0;
      stroke-dasharray: 0.5px;
    }
  }
}
// #endregion


// ******************************************
// MODIFIER CLASSES
// ******************************************

// #region Display data modifier class
.chart--display-data {
  table tbody tr {

    td:not(:first-child) {
      
      span {
        &:before {
          display: none;
        }
        opacity: 1!important;
        z-index: var(--index-above);
        top: 0%;
        transform: translate(-50%, 0%)!important;
        display: block!important;
        height: fit-content;
        background: none!important;
        margin: 0;
      }
    }
  }
}
#{'.chart.chart--display-data '+$bar-chart} table tbody tr td:not(:first-child) {
  span {
    top: 50%;
    right: 0;
    left: 0;
    transform: translate(0%, -50%)!important;
    text-align: right;
    width: calc(100% - 0.4rem);
    min-width: fit-content;
    padding: 0 0.1rem;
    border-radius: 0;
  }
}

#{'.chart.chart--display-data '+$scatter-line-chart} table tbody tr td:not(:first-child) {
  span {
    bottom: 0.25rem;
    top: auto;
  }
}

#{'.chart--display-data '$line-chart} .lines~table tbody tr td:not(:first-child):not(:hover) {
  opacity: 1;
}

// #endregion

// #region Aspect ration modifier classes
.chart--short {
  --chart-height-set: 33.33%;
  --chart-height-lg-set: 33.33%;
}

.chart--tall {
  --chart-height-set: 56.25%;
  --chart-height-lg-set: 56.25%;
}
.chart--square {
  --chart-height-set: 100%;
  --chart-height-lg-set: 100%;
}
.chart--hide-guidelines {
  *:is(.chart__yaxis, .chart__guidelines) {
    display: none!important;
  }
}
// #endregion

// #region Value order modifier class
.chart--value-order tbody tr {
  flex-wrap: nowrap;
  display: flex;
  justify-content: flex-start!important;
}
.chart--value-order tbody tr td{
  order: var(--order,10000)!important;
  display: flex;
  flex-shrink: 0;
}
// #endregion

// #region Crop height modifier classes (Used for bar chart only currently)
.chart--crop-10 .chart__inner {

  overflow: hidden;
  max-height: calc(10 * 3rem);
}
// #endregion

// #region Hide key modifier class
.chart--hide-key {
  .chart__key {
    display: none!important;
  }
}
// #endregion

// #region Display set label modifier class
// For bar chart
.chart.chart--display-set-label input[type="radio"][value="bar"]:not([value="none"]):not([value="pie"]):checked ~ .chart__inner tbody tr td:before {
  content: attr(data-label);
  white-space: nowrap;
  display: block!important;
  position: absolute;
  top: calc(50% - 0.5em);
  right: calc(100% + 0.5em);
  color: #000000;
  font-size: var(--label-size);
}

.chart.chart--display-set-label input[type="radio"][value="bar"]:not([value="none"]):not([value="pie"]):checked ~ .chart__inner[data-set-label]:before {
  content: attr(data-set-label);
}

// For column chart
// TODO
// #endregion

// #region
.chart--hide-total {
  table tbody tr {

    td[data-label="Total"] {
      display: none;
    }
  }
}
// #endregion


// ******************************************
// Second table
// ******************************************

.chart:has(.chart__inner) > table {
  order: 10;
  display: none;
}



// ******************************************
// Animation
// ******************************************
#{'.chart--animate.inview'} {

  --animation-left: 2s;

  table tbody tr td:not(:first-child){

    transition: height 2s ease-out, width 2s ease-out, bottom 2s ease-out, left var(--animation-left) ease-out;
    transition-delay: calc(var(--row-index) * 0.1s);
  }
}

#{'.chart--animate:not(.inview)'} {

  table tbody tr td:not(:first-child) {
    --bottom: var(--min-bottom, 0%)!important;
    --percent: 0%!important;
    --axis: 0%!important;
    --comparison: 0%!important;
  }
}



#{'.chart--animate.inview '+$comparison-chart} {

  --animation-left: 0s;
}

#{'.chart--animate:not(.inview) '+$comparison-chart} {

  table tbody tr td:not(:first-child) {

    --comparison: 50%!important;
  }
}


// #region Animate bar and column chart
#{'.chart--animate.animating ' + $default-chart} {

  table tbody tr td:not(:first-child) {
    overflow: hidden;
  }
}
// #endregion


// #region scatter and line charts

#{'.chart--animate:not(.inview) ' + $scatter-line-chart} {

  table tbody tr td:not(:first-child) {
    --percent: 0%!important;
  }
}
// Line chart 
#{'.chart--animate '+$line-chart}, 
#{'.chart--animate '+$combo-chart} {
  .line path {
    transition: 2s ease-out;
  }
}

#{'.chart--animate:not(.inview) '+$line-chart},
#{'.chart--animate:not(.inview) '+$combo-chart} {
  .line path {
    d: var(--path);
  }
}
// #endregion

// #region pie charts
#{'.chart--animate '+$pie-chart} {
  .pie path {
    transition: calc(2s * var(--second-fraction, 1)) ease-out;
    transition-delay: calc((var(--row-index) * var(--path-index)) * 0.1s);
  }
}

#{'.chart--animate:not(.inview) '+$pie-chart} {
  .pie path {
    transform: scale(60%) !important;
  }
}
#{'.chart--animate:not(.inview) '+$polar-chart} {
  .pie path {
    transform: scale(40%) !important;
  }
}
// #endregion


// #region radar charts
#{'.chart--animate '+$radar-chart} {

  table tbody tr td:not(:first-child){
    transition-delay: 0s;
  }

  .line path {
    transition: 2s ease-out;
  }
}

#{'.chart--animate:not(.inview) '+$radar-chart} {
  .line path {
    d: var(--path);
  }
}
// #endregion


// #region buble charts
#{'.chart--animate '+$bubble-chart} {
  table tbody tr td:not(:first-child){
    overflow: visible;

    &:before {
      transition: 2s ease-out;
      transition-delay: calc(var(--row-index) * 0.1s);
    }
  }
}

#{'.chart--animate:is(.inview).animating '+$bubble-chart} {
  table tbody tr td:not(:first-child){ 
    overflow: visible;

    &:before {
      transform: translate(-50%, -50%) scale(100%); // Sclae to 100% so we can then 'pop' the bubble
    }
  }
}

// This 'pops' the bubble
#{'.chart--animate:is(.inview):not(.animating) '+$bubble-chart} {
  table tbody tr td:not(:first-child){ 
    &:before {
      transition: 0s ease-out;
      transition-delay: calc(var(--row-index) * 0.1s);
    }
  }
}

#{'.chart--animate:not(.inview) '+$bubble-chart} {
  table tbody tr td:not(:first-child) {
    --percent: 0%!important;
    
    &:before {
      transform: translate(-50%, -50%) scale(0%);
    }
  }
}
// #endregion

