// #region Table wrapper - adds overflow support when in smaller containers
.table__wrapper {
  display: block;
  width: calc(100% + 1rem);
  padding-right: 1rem;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: -ms-autohiding-scrollcolumn;
  margin-bottom: 2rem;
}
// #endregion

// #region Basic setup - including: container setup, css vars 
*:has(> .chart){
  container-type: inline-size;
}

.chart {
  
  // CSS vars that can be overwritten by declaring them without the -set on the end of the variable i.e. --chart-colour-1: red; would overwrite --chart-colour-1-set
  --body-colour-set: var(--body-colour, white);
  --text-colour-set: var(--text-colour, black);
  --chart-height-set: var(--chart-height, #{$chart-height});
  --chart-height-lg-set: var(--chart-height-lg, #{$chart-height-lg});
  --chart-height-resp: var(--chart-height-set);

  tbody {
    --chart-direction: 360deg;
    --chart-day-bg-pos: 100% calc(var(--single-day) * 7)
  }
  

  @each $index, $value in $chart-colors {
    --chart-colour-#{$index}-set: var(--chart-colour-#{$index},#{$value});
  }

  // Non-configurable css vars
  --index-below: -1;
  --index-base: 0;
  --index-focus: 2;
  --index-above: 10;
  --index-floating: 100;
  --index-menu: 200;
  --index-overlay: 1000;
  --key-label-width: 100%;
  --label-size: #{rem(12)};
  --pie-size: calc(50% - 1.4rem);
  --line-thickness: 1px;
  --yaxis-width: 0;
  --yaxis-point-display: none;
  --yaxis-last-point-transform: translate(0,-100%);

  @container (min-width: 36em) {

    --chart-height-resp: var(--chart-height-lg-set);
    --pie-size: calc(33.333% - 1.4rem);
    --line-thickness: 0.8px;
    --yaxis-width: auto;
    --yaxis-point-display: block;
    --yaxis-last-point-transform: translate(0,-50%);
  }
  
  @container (min-width: 62em) {

    --label-size: #{rem(14)};
    --pie-size: calc(25% - 1.5rem);
    --line-thickness: 0.5px;
  }

  &:has(.chart__options){
    position: relative;
    padding-top: rem(24);
  }
  
  margin-bottom: 2rem;
  display: flex;
  flex-direction: column;

  > * {
    display: block;
    order: 2;
  }

  > figcaption {
    display: contents;

    p:not(.chart__strapline,.chart__title) {
      margin-bottom: 0.25rem;
      font-size: var(--label-size);
    }

    > * {
      order: 3;
    }

    > :is(.chart__title, .chart__strapline) {
      order: 1;
    }
  }
}
// #endregion

// #region figure caption elements
.chart__title {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.25rem;
}

.chart__strapline {
  margin-bottom: 1rem;
}

.chart__source {
  border-top: 1px solid black;
  position: relative;
  padding-top: rem(4);

}
// #endregion

// #region Apply chart colours
@for $i from 1 to 10 {
  
  .chart__key .key:nth-child(10n - #{10 - $i}),
  input[type="radio"]:not([value="none"]):not([value="pie"]):checked ~ .chart__inner table tbody tr td:not(:first-child):nth-child(10n - #{10 - ($i+1)}) {
    
    --chart-colour: var(#{'--chart-colour-'+$i+'-set'});
  }

  input:is([value="line"],[value="radar"],[value="combo"],[value="proportional"]):checked ~ .chart__inner .line:nth-child(10n - #{10 - $i}) {
    color: var(#{'--chart-colour-'+$i+'-set'});
    stroke: currentColor;
    fill: currentColor;
    z-index: #{10 - $i};
  }
  input:is([value="pie"],[value="polar"]):checked ~ .chart__inner .pie path:nth-child(10n - #{10 - $i}) {
    fill: var(#{'--chart-colour-'+$i+'-set'});
  }
}

.chart__key .key:nth-child(10n),
input[type="radio"]:not([value="none"]):not([value="pie"]):checked ~ .chart__inner table tbody tr td:not(:first-child):nth-child(10n + 1) {
  
  --chart-colour: var(#{'--chart-colour-10-set'});
}
// #endregion

// #region Chart type switcher
.chart > [type="radio"]{
  opacity: 0;
  position: absolute;
  pointer-events: none;
}

.chart__options {

  position: absolute;
  display: block;
  width: fit-content;
  z-index: var(--index-above);
  top: 0;
  right: 0;
  background-color: var(--body-colour-set);
  

  > span:first-child {
    text-align: right;
    display: block;
    height: rem(24);

    &:before {
      content: "";
      height: rem(16);
      width: rem(16);
      background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3e%3cpath d='M31 19.3v-6.5l-3.9-.5c-.1-.4-.3-.9-.5-1.5l2.4-3-4.7-4.7-3.1 2.4c-.4-.2-.9-.4-1.5-.6L19.2 1h-6.5l-.5 3.9c-.6.2-1.1.4-1.5.6l-3-2.4L3 7.7l2.4 3c-.2.5-.4 1.1-.5 1.5l-3.9.5v6.5l3.9.5c.2.5.3 1 .6 1.5l-2.4 3 4.7 4.7 3-2.3c.4.2 1 .5 1.5.6l.5 3.8h6.5l.5-3.8c.5-.2 1.1-.4 1.5-.6l3 2.3 4.7-4.7-2.4-3 .6-1.5 3.8-.4zm-2.1-1.9-3.4.5c-.3 1.5-.8 2.7-1.6 3.6l2.1 2.6-1.9 2-2.6-2c-1 .7-2.5 1.3-3.7 1.5l-.5 3.3h-2.6l-.5-3.3c-1.2-.2-2.7-.8-3.7-1.5l-2.6 2-1.9-2 2.1-2.6c-.8-.9-1.2-2.1-1.6-3.6l-3.4-.5v-2.7l3.5-.5c.2-1.1.6-2.3 1.4-3.7L6 7.9l1.9-2L10.6 8c.8-.7 1.7-1.1 3.6-1.6l.5-3.4h2.6l.5 3.4c1.9.5 2.8.9 3.6 1.6l2.7-2L26 8l-2 2.5c.8 1.4 1.2 2.6 1.4 3.7l3.5.5v2.7zM16 20.8c-2.7 0-4.7-2-4.7-4.8 0-2.7 2-4.7 4.7-4.7s4.7 2 4.7 4.7-2 4.8-4.7 4.8zm0 2.2c3.9 0 6.9-3 6.9-7 0-3.9-3-6.9-6.9-6.9s-6.9 3-6.9 6.9c0 4 3 7 6.9 7z'%3e%3c/path%3e%3c/svg%3e");
      background-size: 100% 100%;
      display: inline-block;

      vertical-align: bottom;
      margin-bottom: rem(3);
      margin-right: rem(6);
    }
  }

  > *:not(:first-child) {

    display: none;
  }

  label {
    cursor: pointer;
    
    &:hover {

      background: var(--label-bg, rgb(220, 220, 220));
    }
  }

  &:hover {
    outline: 3px solid black;

    box-shadow: 0 0 0 calc(0.125rem + 0.125rem) #FFFFFF;
    outline-offset: calc(0.125rem + 0.125rem);

    > * {
      display: block;
    }
  }

  .chart__options__title {
    margin-top: 1rem;
    font-weight: bold;
  }
}

.chart > [type="radio"]:focus ~ .chart__switcher{
  label {
    display: block;
  }
}
// #endregion

// #region Chart key
.chart > input[type="checkbox"] {
  opacity: 0;
  position: absolute;
  pointer-events: none;
}

.chart__key {

  padding: 0.75rem 0 0 0.75rem;
  margin-bottom: 1.5rem;
  background: var(--colour-key-bg, rgb(220, 220, 220));
  display: flex;
  overflow: auto;
  scroll-snap-type: x mandatory;
    scroll-padding: 0.75rem;

  .key {
    display: inline-block;
    padding: 0.5rem;
    margin-right: 0.75rem;
    margin-bottom: 0.75rem;
    background: white;
    border-left: 5px solid var(--chart-colour);
    white-space: nowrap;
    cursor: pointer;
    scroll-snap-align: start;

    &:hover,
    &:focus-within {
      outline: 3px solid var(--chart-colour);
    }

    &[data-label="Min"],
    &[data-label="Max"] {
      display: none;
    }

    .chart__total {
      display: none;
    }
  }
}
// #endregion

// #region Hide data sets
.chart > input[type="checkbox"]:not(:checked) ~ .chart__key .key {
  
  opacity: 0.25;
}

.chart > input[type="checkbox"]:not(:checked) ~ input[type="radio"]:not([value="none"]):checked ~ .chart__inner table tbody tr td:not(:first-child) {
  display: none;
}

.chart > input[type="checkbox"]:not(:checked) ~ .chart__inner :is(.lines, .radar) .line {
  display: none!important;
}

@for $i from 1 to 10 {
  

  .chart > input[type="checkbox"]:nth-of-type(#{$i}):not(:checked) ~ input[type="radio"]:not([value="none"]):checked ~ .chart__inner table tbody tr td:not(:first-child):nth-child(#{$i+1}) {
    display: block;
  }

  .chart > input[type="checkbox"]:nth-of-type(#{$i}):focus ~ .chart__key .key:nth-of-type(#{$i}) {
    outline: 3px solid var(--chart-colour);
  }

  .chart > input[type="checkbox"]:nth-of-type(#{$i}):not(:checked) ~ .chart__key .key:nth-of-type(#{$i}) {
    
    opacity: 1;
  }
  
  input:nth-of-type(#{$i}):not(:checked) ~ .chart__inner :is(.lines,.radar) .line:nth-child(#{$i}) {
    display: block!important;
  }
}
// #endregion

// #region Second table
.chart:has(.chart__inner) > table {
  order: 10;
  display: none;
}
// #endregion Second table

// #region Default column chart (Also applies to line chart)
#{'.chart ' + $default-chart} {

  display: block;
  display: flex;
  position: relative;
  margin-bottom: 1rem;

  .chart__yaxis {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column-reverse;
    width: 0;
    width: var(--yaxis-width);

    .axis__point {
      
      bottom: var(--percent);
      position: relative;
      height: 0;
      white-space: nowrap;

      &:not(:last-child){
        display: var(--yaxis-point-display);
      }

      span {
        display: block;
        transform: translate(0,-50%);
        padding-right: 0.25rem;
        text-align: right;
        font-size: var(--label-size);
      }

      &:last-child span {

        transform: var(--yaxis-last-point-transform);
      }
    }
  }

  .chart__xaxis {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column-reverse;
    width: 100%;
    position: absolute;
    left: 0;
    bottom: -1rem;

    .axis__point {
      
      left: var(--percent);
      width: 1px;
      position: absolute;
      height: 0;
      white-space: nowrap;

      span {
        display: block;
        transform: translate(-50%, 0%);
        text-align: center;
        font-size: var(--label-size);
        position: absolute;
        left: 50%;
      }
    }
  }

  .chart__guidelines {

    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: calc(100% - 1rem);
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column-reverse;
    pointer-events: none;

    .guideline {

      bottom: var(--percent);
      position: absolute;
      right: 0;
      width: 100%;
      height: 0px;
      margin-bottom: -1px;
      border-bottom: 1px dashed #eeeeee;
      pointer-events: none;
      z-index: var(--index-below);
      //overflow: hidden;

      &:not(.guideline--target) span{
        display: none;
      } 
    }

    .guideline--target {

      border-bottom: 1px dashed #000000;
      z-index: var(--index-above);
      text-shadow: 1px solid white;
      overflow: visible;

      span {
        position: absolute;
        bottom: 0;
        font-size: var(--label-size);
        text-shadow: 1px 1px 2px rgba(255, 255, 255, 1);
        background: rgba(255,255,255,0.6);
      }
    }
    [data-value="0"] {
      border-bottom: 1px solid var(--colour-primary);

      &:not(:first-child){

        border-bottom: 1px dashed var(--colour-primary);
      }
    }
  }

  .table__wrapper {

    padding-bottom: 1rem;
    padding-right: 0;
    margin: 0;
    overflow: visible;
    position: relative;

    table{
      overflow: visible;
    }
  }

  table {
    display: block;
    width: 100%;
    padding-top: var(--chart-height-resp); // 16:9 ratio
    position: relative;
    margin-bottom: 0;
    //border-bottom: 1px solid black;

    thead {
      display: none;
    }

    tbody {

      display: flex;
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      flex-direction: row;
      border: none;
    }
    
    tbody tr {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: flex-end;
      border: none;
      width: 100%;
      height: 100%;
      position: relative;
      padding: 0 2px;

      td {
        font-weight: inherit;
      }

      td:first-child {
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translate(-50%,0);
        width: fit-content;
        padding: 0;
        white-space: nowrap;
        max-width: 6rem;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: var(--label-size);
        display: none;
        text-align: center;

        @container (min-width: 62em) {
    
          display: block;
          left: 50%!important;
          transform: translate(-50%,0)!important;
        }
      }

      td[data-label="Min"],
      td[data-label="Max"] {
        display: none;
      }

      &:first-child td:first-child,
      &:last-child td:first-child {

        display: block;
      }

      
      &:first-child td:first-child {

        left: 0%;
        transform: translate(0,0);
        display: block;
        text-align: left;
      }
      &:last-child td:first-child {

        left: 100%;
        transform: translate(-100%,0);
        display: block;
        text-align: right;
      }

      td:not(:first-child) {
        height: 100%;
        height: var(--percent, 0%);
        bottom: var(--bottom,0%);
        width: 100%;
        max-width: 5rem;
        position: relative;
        background: green;
        padding: 0;
        background: var(--chart-colour);

        &:has(span:empty),
        &:empty{
          display: none;
        }

        &[data-label]:before {
          display: none;
        }

        span {
          position: absolute;
          bottom: 100%;
          left: 50%;
          font-size: var(--label-size);
          line-height: 1.2;
          transform: translate(-50%,0);
          background: var(--chart-colour);
          opacity: 0;
          pointer-events: none;
          padding: 0.5rem;
          border-radius: 0.5rem;
          margin-bottom: 0.25rem;
          color: white;
          white-space: pre;
          text-align: center;

          &::before {
            content: attr(data-label)'\A'attr(data-group)'\A';
          }

          &[data-second]:after {
            content: '\A' attr(data-second-label) ': ' attr(data-second);
          }
        }

        &:hover span {
          opacity: 1;
          z-index: var(--index-above);
        }
      }

      &:first-child td:not(:first-child) span {

        left: -20%;
        transform: translate(0%,0);
        text-align: left;
      }

      &:last-child td:not(:first-child) span {
          
        left: 120%;
        transform: translate(-100%,0);
        text-align: right;
      }

      @container (min-width: 36em) {

        &:first-child td:not(:first-child) span,
        &:last-child td:not(:first-child) span {
          
          left: 50%;
          transform: translate(-50%,0);
          text-align: center;
        }
      }

      td:first-child {
        &[data-label]:before {
          display: none;
        }
      }
    }

    // Hide labels when it gets crowded
    @container (min-width: 62em) {

      tbody:has(tr:nth-child(25)){
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(5n)) td:first-child {
          display: block!important;
        }
      }

      tbody:has(tr:nth-child(50)){

        tr:is(:first-child, :nth-child(5n)) td:first-child,
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(10n)) td:first-child {
          display: block!important;
        }
      }

      tbody:has(tr:nth-child(100)){

        tr:is(:first-child, :nth-child(10n)) td:first-child,
        tr td:first-child {
          display: none!important;
        }

        tr:is(:first-child, :nth-child(20n)) td:first-child {
          display: block!important;
        }
      }
    }

    // Hide items when theres too many too display
    tbody:has(tr:nth-child(1001)){

      tr {
        display: none;
      }

      tr:nth-last-child(-n+1001) ~ tr {
        display: flex;
      }
    }
  }

  .line,
  .pie {
    display: none;
  }
}
// #endregion

// #region Reverted back into a table
input[type="radio"][value="none"]:checked ~ .chart__key {
  display: none;
}
input[type="radio"][value="none"]:checked ~ .chart__inner {

  .chart__guidelines,
  .chart__yaxis,
  .line,
  .pie {
    display: none;
  }
}
// #endregion